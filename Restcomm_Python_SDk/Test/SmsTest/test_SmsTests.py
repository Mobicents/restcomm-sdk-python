'''
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2016, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 
 This code was generated by :
 Name: Md Sharique
 Email : nukles1.07@gmail.com
 '''

import unittest
import nose
import vcr

from Restcomm_Python_SDk.Restcomm.Sms import Sms

class TestSendSms(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Send(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                To = '9840254165'
                From = '5065'
                Body = 'hey! its a dummy message. Please ignore it.'

                data = Sms.client(Sid, AuthToken, BaseUrl)
                content = Sms.SendSms(To, From, Body, data).Send()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestSmsList(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_GetList(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'

                data = Sms.client(Sid, AuthToken, BaseUrl)
                content = Sms.SmsList(data).GetList()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")


class TestFilterSmsList(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_GetFilterList(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                FilterNumber = '+918282900654'

                data = Sms.client(Sid, AuthToken, BaseUrl)
                content = Sms.FilterSmsList(FilterNumber, data).GetFilterlist()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestSmsPagingInfo(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_PageInfo(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                PageSize = '1'

                data = Sms.client(Sid, AuthToken, BaseUrl)
                content = Sms.SmsPagingInformation(PageSize, data).PageInfo()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

if __name__ == '__main__':
    unittest.main()
    nose.main()