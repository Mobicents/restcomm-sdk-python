'''
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2016, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.

 This code was generated by :
 Name: Md Sharique
 Email : nukles1.07@gmail.com
 '''

import unittest
import nose
import vcr
from Restcomm_Python_SDk.Restcomm.Geolocation import Geolocation

class TestIPLocation(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_locate(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            DIdentifier = 'david'
            CallBack = 'https://mockServer.com/'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.IPLocation(DIdentifier,CallBack, data).locate()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestUpdateGeo(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Update(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            GeoSid = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.UpdateGeo(GeoSid, data).Update()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestGetGeolocation(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def testGetInfo(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            GeoSid = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.GetGeolocation(GeoSid, data).GetInfo()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestNotifyGeolocation(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Notify(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            DIdentifier = '56790122158'
            GeoLatitude = '-33.426280'
            GeoLongitude = '-70.566560'
            GeoRange = '1000'
            GeoEvent = 'in'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.NotifyGeolocation(DIdentifier, GeoLatitude, GeoLongitude, GeoRange, GeoEvent, data).Notify()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestNotifyHighAccuracy(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def testNotifyLocate(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            Source = '59897018375'
            Accuracy = 'High'
            DIdentifier = '56790122158'
            GeoLatitude = '-34.541078'
            GeoLongitude = '-56.061600'
            GeoRange = '300'
            GeoEvent = 'in'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.NotifyHighAccuracy(Source, DIdentifier, GeoLatitude, GeoLongitude, GeoRange, GeoEvent, Accuracy, data).NotifyLocate()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestUpdateExitRange(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_UpdateRange(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            GeoSid = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
            GeoLatitude = '-34.553098'
            GeoLongitude = '56.050811'
            GeoEvent = 'out'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.UpdateExitRange(GeoSid, GeoLatitude, GeoLongitude, GeoEvent, data).UpdateRange()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestRetrieveGeoRequest(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episode')
    def test_Retrieve(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            GeoSid = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.RetrieveGeoRequest(GeoSid, data).Retrieve()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestStopGeoNotify(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_StopGeoNotify(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            GeoSid = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'

            data = Geolocation.client(Sid, AuthToken, BaseUrl)
            content = Geolocation.StopGeoNotify(GeoSid, data).Stop()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

if __name__ == '__main__':
    unittest.main()
    nose.main()