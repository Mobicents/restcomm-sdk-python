'''
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2016, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 
 This code was generated by :
 Name: Md Sharique
 Email : nukles1.07@gmail.com
 '''

import unittest

import vcr

from Restcomm_Python_SDk.Restcomm.call import call


class TestMakeCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def testCall(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                From = '5065'
                To = 'client:sam'
                Url = 'https://mockServer.com/mock/demos/hello-play.xml'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.Makecall(From, To, Url, data).Call()

                self.assertIsNotNone(content)
                self.assertNotEqual(Sid, content["sid"])

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestGetCallDetails(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_GetDetails(self):

        try:

                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.GetCallDetail(data).GetDetails()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("TypeError: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestRedirectCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Redirect(self):

        try:
                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                Url = 'https://mockServer.com/mock/demos/dial­alice.xml'
                SubSid = 'RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.RedirectCall(Url, SubSid, data).Redirect()

                self.assertIsNotNone(content)
                self.assertNotEqual(Sid, content["sid"])

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestConferenceCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Conference(self):

        try:
                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                Url = 'https://mockServer.com/mock/demos/dial­alice.xml'
                SubSid = 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.ConferenceCall(Url, SubSid, data).Conference()

                self.assertIsNotNone(content)
                self.assertNotEqual(content["sid"], Sid)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestMuteCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Mute(self):

        try:
                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                PartSid = 'RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR'
                ConSid = 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.MuteParticipant(PartSid, ConSid, data).Mute()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")


class TestUnMuteCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_UnMute(self):

        try:
                Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
                BaseUrl = 'https://mockServer.com/mock/2012-04-24'
                PartSid = 'RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR'
                ConSid = 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'

                data = call.client(Sid, AuthToken, BaseUrl)
                content = call.UnMuteParticipant(PartSid, ConSid, data).UnMute()

                self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestTerminateCall(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_Terminate(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            SubSid = 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'
            status = 'canceled'
            data = call.client(Sid, AuthToken, BaseUrl)
            content = call.TerminateCall(status, SubSid, data).Terminate()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

class TestCallFilter(unittest.TestCase):

    @vcr.use_cassette(record_mode='new_episodes')
    def test_FilterCall(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            FromParam = '5065'

            data = call.client(Sid, AuthToken, BaseUrl)
            content = call.CallFilter(FromParam, data).FilterFrom()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

    @vcr.use_cassette(record_mode='new_episodes')
    def test_FilterPage(self):

        try:

            Sid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            AuthToken = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            BaseUrl = 'https://mockServer.com/mock/2012-04-24'
            PageSize = '1'

            data = call.client(Sid, AuthToken, BaseUrl)
            content = call.CallFilter(PageSize, data).FilterPage()

            self.assertIsNotNone(content)

        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")
        except IndexError:
            print("Index Error: list Index out of range")

if __name__ == '__main__':
    unittest.main()