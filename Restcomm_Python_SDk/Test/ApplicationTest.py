'''
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2016, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 
 This code was generated by :
 Name: Md Sharique
 Email : nukles1.07@gmail.com
 '''

from Restcomm_Python_SDk import Applications
import unittest
import requests
from unittest.mock import Mock, patch

class TestCreateApplication(unittest.TestCase):

    def test_Create(self):

        try:

            with patch.object(requests, 'post')as get_mock:

                file2 = open('index.html', 'w')

                message = """<Application>
                <sid>QW21b4d94a9b2b1862342a1978b70d26f2</sid>
                <status>Active</status>
                <DateCreated>12/06/2017</DateCreated>
                <DateUpdated>15/06/2017</DateUpdated>
                </Application>"""

                file2.write(message)
                file2.close()

                file2 = open('index.html', 'r')

                file = open("ApplicationData.txt","r")
                Sid = file.readline()
                AuthToken = file.readline()
                BaseUrl = file.readline()
                FriendlyName = file.readline()
                kind = file.readline()
                get_mock.return_value = mock_response = Mock()
                mock_response = file2.read()

                data = Applications.client(Sid.strip(), AuthToken.strip(), BaseUrl.strip())
                content = Applications.CreateApplication(FriendlyName.strip(), kind.strip(), data).Create()
                self.assertEqual(content, file2.read())
                self.assertIsNotNone(content)
                file.close()
                file2.close()

        except SyntaxError:
            print("Oops! Syntax Error: AccountSid or AuthToken is incorrect. Please check your kind of application also!")
        except ConnectionError:
            print("Connection Error: It seems that you have No Connection. Please try again after reconnecting")
        except TimeoutError:
            print("Timeout Error: Its taking too much time")
        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")

class TestGetApplicationDetail(unittest.TestCase):

    def test_GetDetail(self):

        try:

            with patch.object(requests, 'get')as get_mock:

                file2 = open('index.html', 'w')

                message = """<Application>
                <sid>QW21b4d94a9b2b1862342a1978b70d26f2</sid>
                <status>Active</status>
                <DateCreated>12/06/2017</DateCreated>
                <DateUpdated>15/06/2017</DateUpdated>
                <FriendlyName>gameApp</FriendlyName>
                <kind>voice</kind>
                </Application>"""

                file2.write(message)
                file2.close()

                file2 = open('index.html', 'r')

                file = open("ApplicationData.txt","r")
                Sid = file.readline()
                AuthToken = file.readline()
                BaseUrl = file.readline()
                get_mock.return_value = mock_response = Mock()
                mock_response = file2.read()

                data = Applications.client(Sid.strip(), AuthToken.strip())
                content = Applications.GetApplicationList(data).GetList()
                self.assertEqual(content, file2.read())
                self.assertIsNotNone(content)
                file.close()
                file2.close()

        except SyntaxError:
            print("Oops! Syntax Error: AccountSid or AuthToken is incorrect. Please check your kind of application also!")
        except ConnectionError:
            print("Connection Error: It seems that you have No Connection. Please try again after reconnecting")
        except TimeoutError:
            print("Timeout Error: Its taking too much time")
        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except IndexError:
            print("Index Error: list Index out of range")
        except TypeError:
            print("Type Error: the value is of wrong type")

class TestDeleteApplication(unittest.TestCase):

    def test_Delete(self):

        try:

            with patch.object(requests, 'delete')as get_mock:

                file2 = open('index.html', 'w')

                message = """<Application>
                <AccountSid>QW21b4d94a9b2b1862342a1978b70d26f2</AccountSid>
                <DateCreated>12/06/2017</DateCreated>
                <DateUpdated>15/06/2017</DateUpdated>
                </Application>"""

                file2.write(message)
                file2.close()

                file2 = open('index.html', 'r')

                file = open("ApplicationData.txt","r")
                Sid = file.readline()
                AuthToken = file.readline()
                BaseUrl = file.readline()
                file.readline()
                file.readline()
                AppSid = file.readline()
                get_mock.return_value = mock_response = Mock()
                mock_response = file2.read()

                data = Applications.client(Sid.strip(), AuthToken.strip(), BaseUrl.strip())
                content = Applications.DeleteApplication(AppSid.strip(), data)

                self.assertIsNotNone(content)
                file.close()
                file2.close()

        except SyntaxError:
            print("Oops! Syntax Error: AccountSid or AuthToken is incorrect. Please check your kind of application also!")
        except ConnectionError:
            print("Connection Error: It seems that you have No Connection. Please try again after reconnecting")
        except TimeoutError:
            print("Timeout Error: Its taking too much time")
        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type")

class TestUpdateApplication(unittest.TestCase):

    def test_Update(self):

        try:

            with patch.object(requests, 'post')as get_mock:

                file2 = open('index.html', 'w')

                message = """<Application>
                <AccountSid>QW21b4d94a9b2b1862342a1978b70d26f2</AccountSid>
                <DateCreated>12/06/2017</DateCreated>
                <DateUpdated>15/06/2017</DateUpdated>
                </Application>"""

                file2.write(message)
                file2.close()

                file2 = open('index.html', 'r')

                file = open("ApplicationData.txt","r")
                Sid = file.readline()
                AuthToken = file.readline()
                BaseUrl = file.readline()
                file.readline()
                file.readline()
                AppSid = file.readline()
                FriendlyName = file.readline()
                get_mock.return_value = mock_response = Mock()
                mock_response = file2.read()

                data = Applications.client(Sid.strip(), AuthToken.strip(), BaseUrl.strip())
                content = Applications.UpdateApplication(AppSid, FriendlyName, data)

                self.assertIsNotNone(content)
                file.close()
                file2.close()

        except SyntaxError:
            print("Oops! Syntax Error: AccountSid or AuthToken is incorrect. Please check your kind of application also!")
        except ConnectionError:
            print("Connection Error: It seems that you have No Connection. Please try again after reconnecting")
        except TimeoutError:
            print("Timeout Error: Its taking too much time")
        except FileNotFoundError:
            print("FileNotFound Error: File not found. please check and try again!")
        except ImportError:
            print("Import Error: Please Import proper library!")
        except TypeError:
            print("Type Error: the value is of wrong type!")

if __name__=="__main__":
    unittest.main()
